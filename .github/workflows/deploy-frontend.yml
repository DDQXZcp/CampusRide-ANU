name: Deploy Frontend (Vite → S3 + CloudFront)

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/frontend/**'
      - 'apps/infrastructure/infrastructure-frontend.yml'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2
  ROLE_ARN: arn:aws:iam::334643191233:role/GitHubActions-GradTrackDeploy
  FRONTEND_STACK: Herman-GradTrack-Frontend
  TEMPLATE_PATH: apps/infrastructure/infrastructure-frontend.yml

  # Your desired site & cert (CloudFront cert must be in us-east-1)
  SITE_DOMAIN: gradtrack.herman-tang.com
  ACM_CERT_ARN: arn:aws:acm:us-east-1:334643191233:certificate/8b188b6e-e416-4859-91ad-eac406b27775

  # Your Route53 public hosted zone (for herman-tang.com)
  HOSTED_ZONE_ID: Z08785651YWXFF77ALIFS

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: frontend-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Find the HTTP API created by the backend stack
      - name: Resolve API Gateway (HTTP API) ID by name
        id: api
        run: |
          API_ID=$(aws apigatewayv2 get-apis \
            --query "Items[?Name=='GradTrackHttpApi'].ApiId" --output text)
          if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
            echo "Could not find an HTTP API named 'GradTrackHttpApi'."
            exit 1
          fi
          echo "api_id=$API_ID" >> $GITHUB_OUTPUT
          echo "Resolved HTTP API ID: $API_ID"

      # Create the frontend stack if it doesn't exist (idempotent)
      - name: Ensure frontend stack exists (create/update)
        run: |
          set -e
          if aws cloudformation describe-stacks --stack-name "$FRONTEND_STACK" >/dev/null 2>&1; then
            echo "Stack $FRONTEND_STACK exists. Updating…"
          else
            echo "Stack $FRONTEND_STACK not found. Creating…"
          fi

          # Validate template before deploy (good early error signal)
          aws cloudformation validate-template --template-body file://$GITHUB_WORKSPACE/${TEMPLATE_PATH}

          aws cloudformation deploy \
            --stack-name "$FRONTEND_STACK" \
            --template-file "$GITHUB_WORKSPACE/${TEMPLATE_PATH}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              SiteDomain="${SITE_DOMAIN}" \
              ACMCertificateArn="${ACM_CERT_ARN}" \
              HostedZoneId="${HOSTED_ZONE_ID}" \
              HttpApiId="${{ steps.api.outputs.api_id }}" \
              ApiStageName="prod"

      - name: Read stack outputs (bucket, distribution, url)
        id: outputs
        run: |
          BUCKET=$(aws cloudformation describe-stacks --stack-name "$FRONTEND_STACK" \
            --query "Stacks[0].Outputs[?OutputKey=='SiteBucketName'].OutputValue" --output text)
          DIST=$(aws cloudformation describe-stacks --stack-name "$FRONTEND_STACK" \
            --query "Stacks[0].Outputs[?OutputKey=='DistributionId'].OutputValue" --output text)
          URL=$(aws cloudformation describe-stacks --stack-name "$FRONTEND_STACK" \
            --query "Stacks[0].Outputs[?OutputKey=='SiteURL'].OutputValue" --output text)

          if [ -z "$BUCKET" ] || [ "$BUCKET" = "None" ]; then
